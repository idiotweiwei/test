<?xml version="1.0" encoding="UTF-8"?>
<!--使用注解，是需要命名空间和约束文件。以下就是一些约束文件-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--组件扫描和自动装配。。。提示这个路径下的类是使用注解的-->
    <context:component-scan base-package="com.gwj.jnshu"/>


    <!--1.载属性配置文件。。。数据库信息-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--或者这样配置-->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">-->
        <!--<property name="location" value="classpath:jdbc.properties"/>-->
    <!--</bean>-->

    <!--2.数据库连接池-->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 配置数据源 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3" />
        <property name="minIdle" value="3" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!--&lt;!&ndash;配置数据源&ndash;&gt;-->
        <!--<property name="driverClass" value="${jdbc.driver}"/>-->
        <!--<property name="jdbcUrl" value="${jdbc.url}"/>-->
        <!--<property name="user" value="${jdbc.user}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->

        <!--&lt;!&ndash;c3p0连接池的私有属性&ndash;&gt;-->
        <!--<property name="maxPoolSize" value="30"/>-->
        <!--<property name="minPoolSize" value="10"/>-->
        <!--&lt;!&ndash;关闭连接后不自动commit&ndash;&gt;-->
        <!--<property name="autoCommitOnClose" value="false"/>-->
        <!--&lt;!&ndash;获取连接超时时间&ndash;&gt;-->
        <!--<property name="checkoutTimeout" value="10000"/>-->
        <!--&lt;!&ndash;当获取连接失败重新次数&ndash;&gt;-->
        <!--<property name="acquireRetryAttempts" value="2"/>-->
    </bean>



    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entities包，使用别名-->
        <property name="typeAliasesPackage" value="com.gwj.jnshu.entities"/>
        <!-- 自动扫描mapping.xml文件,扫描sql配置文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"/>
    </bean>


    <!--4.配置DAO接口所在包名，动态实现dao接口，注入到Spring容器，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--给出需要扫描的Dao接口-->
        <property name="basePackage" value="com.gwj.jnshu.dao"/>
    </bean>


    <!--事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--&lt;!&ndash;配置基于注解的声明式事务&ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
</beans>